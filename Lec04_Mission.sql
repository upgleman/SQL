-- 04 다수의 테이블 제어하기
-- [미션1] 판매기록 조회하기

-- 엘리스는 가게에서 각 물건이 언제 얼마나 많이 팔렸는지 확인해보려고 합니다.

-- 그래서 판매기록이 담긴 sale테이블을 조회하려고 합니다.

-- 이때, 각 상품별로 정리해서 보기 위해 product테이블과 연결해서 product테이블이 중심이 되도록 조회하려고 합니다.

-- 여러분이 엘리스가 하려는 작업을 도와주세요!

-- 지시사항
-- sale테이블의 모든 컬럼을 조회하되 product테이블과 연결해 조회해 보세요.
-- 연결할 때에는 product테이블의 id와 sale테이블의 product_id를 기준으로 연결해 보세요.
-- 이때 product테이블이 중심이 되도록 연결해 보세요.
-- sale테이블의 내용은 다음과 같습니다.


-- 판매기록을 product 테이블과 연결해 출력해 봅시다.
-- 이때 product테이블이 중심이 되도록 해 봅시다.

DESC sale;
DESC product;

select * from sale;
select * from product;

select * from sale
right join product
on product.id = sale.product_id;

+------------+---------+------+-----+---------+-------+
| Field      | Type    | Null | Key | Default | Extra |
+------------+---------+------+-----+---------+-------+
| id         | int(11) | NO   |     | NULL    |       |
| product_id | int(11) | NO   | MUL | NULL    |       |
| amount     | int(11) | YES  |     | NULL    |       |
| money      | int(11) | YES  |     | NULL    |       |
+------------+---------+------+-----+---------+-------+
+-----------------+-------------+------+-----+---------+-------+
| Field           | Type        | Null | Key | Default | Extra |
+-----------------+-------------+------+-----+---------+-------+
| id              | int(11)     | NO   | PRI | NULL    |       |
| name            | varchar(32) | NO   |     | NULL    |       |
| stock           | int(11)     | YES  |     | NULL    |       |
| expiration_date | date        | YES  |     | NULL    |       |
| list_price      | int(11)     | YES  |     | NULL    |       |
| selling_price   | int(11)     | YES  |     | NULL    |       |
| discount_rate   | float       | YES  |     | NULL    |       |
+-----------------+-------------+------+-----+---------+-------+
+----+------------+--------+--------+
| id | product_id | amount | money  |
+----+------------+--------+--------+
|  1 |          1 |     10 |   9000 |
|  2 |          1 |      5 |   4500 |
|  3 |          4 |      1 |  10000 |
|  4 |          3 |      1 | 180000 |
|  5 |          2 |    100 |  90000 |
|  6 |          5 |     20 |  36000 |
|  7 |          2 |     10 |   9000 |
|  8 |          1 |      1 |    900 |
|  9 |          5 |     10 |  18000 |
| 10 |          3 |      1 | 180000 |
+----+------------+--------+--------+
+----+------------+-------+-----------------+------------+---------------+---------------+
| id | name       | stock | expiration_date | list_price | selling_price | discount_rate |
+----+------------+-------+-----------------+------------+---------------+---------------+
|  1 | carrot     |   100 | 2019-04-10      |       1000 |           900 |           0.9 |
|  2 | tea        |  1000 | 2020-02-10      |       1000 |           900 |           0.9 |
|  3 | clock      |   100 | NULL            |     200000 |        180000 |           0.9 |
|  4 | trump card |   100 | NULL            |      10000 |         10000 |             1 |
|  5 | onion      |   100 | 2019-04-11      |       2000 |          1800 |           0.9 |
+----+------------+-------+-----------------+------------+---------------+---------------+

+------+------------+--------+--------+----+------------+-------+-----------------+------------+---------------+---------------+
| id   | product_id | amount | money  | id | name       | stock | expiration_date | list_price | selling_price | discount_rate |
+------+------------+--------+--------+----+------------+-------+-----------------+------------+---------------+---------------+
|    1 |          1 |     10 |   9000 |  1 | carrot     |   100 | 2019-04-10      |       1000 |           900 |           0.9 |
|    2 |          1 |      5 |   4500 |  1 | carrot     |   100 | 2019-04-10      |       1000 |           900 |           0.9 |
|    8 |          1 |      1 |    900 |  1 | carrot     |   100 | 2019-04-10      |       1000 |           900 |           0.9 |
|    5 |          2 |    100 |  90000 |  2 | tea        |  1000 | 2020-02-10      |       1000 |           900 |           0.9 |
|    7 |          2 |     10 |   9000 |  2 | tea        |  1000 | 2020-02-10      |       1000 |           900 |           0.9 |
|    4 |          3 |      1 | 180000 |  3 | clock      |   100 | NULL            |     200000 |        180000 |           0.9 |
|   10 |          3 |      1 | 180000 |  3 | clock      |   100 | NULL            |     200000 |        180000 |           0.9 |
|    3 |          4 |      1 |  10000 |  4 | trump card |   100 | NULL            |      10000 |         10000 |             1 |
|    6 |          5 |     20 |  36000 |  5 | onion      |   100 | 2019-04-11      |       2000 |          1800 |           0.9 |
|    9 |          5 |     10 |  18000 |  5 | onion      |   100 | 2019-04-11      |       2000 |          1800 |           0.9 |
+------+------------+--------+--------+----+------------+-------+-----------------+------------+---------------+---------------+

-- [미션2] 인기 있는 물건

-- 주식회사 엘리스에는 여러 물건들을 팔고 있습니다.

-- sale 테이블에 물건이 판매될 때마다 판매된 양과 수익이 기록되어 있습니다.

-- 물건 생산량을 조절하기 위해 어떤 물건이 가장 인기 있는지 확인해봅시다.

-- 지시사항
-- 물건의 이름(name)과 물건 별 판매량(amount)의 합을 검색하세요. 단 해당 물건의 총 판매 수익(revenue)의 합이 50000이상인 것만 검색해봅시다.


-- 지시사항을 만족하는 쿼리를 작성해보세요.
DESC sale;
select * from sale;
 
select name, sum(amount)
from sale group by name
having sum(revenue) >= '5.0E4';

+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| id      | int(11)     | NO   | PRI | NULL    |       |
| name    | varchar(16) | NO   |     | NULL    |       |
| amount  | int(11)     | YES  |     | NULL    |       |
| revenue | int(11)     | YES  |     | NULL    |       |
+---------+-------------+------+-----+---------+-------+
+----+----------+--------+---------+
| id | name     | amount | revenue |
+----+----------+--------+---------+
|  1 | tea      |     10 |    9000 |
|  2 | tea      |      5 |    4500 |
|  3 | card     |      1 |   10000 |
|  4 | clock    |      1 |  180000 |
|  5 | carrot   |    100 |   90000 |
|  6 | onion    |     20 |   36000 |
|  7 | carrot   |     10 |    9000 |
|  8 | tea      |      1 |     900 |
|  9 | onion    |     10 |   18000 |
| 10 | clock    |      1 |  180000 |
| 11 | umbrella |      5 |   50000 |
+----+----------+--------+---------+

+----------+-------------+
| name     | sum(amount) |
+----------+-------------+
| carrot   |         110 |
| clock    |           2 |
| onion    |          30 |
| umbrella |           5 |
+----------+-------------+

-- [미션3] 부서별 인원 수 검색하기
-- 주식회사 엘리스의 사원들은 자신이 속한 부서를 하나씩 가지고 있습니다.
-- employees 테이블은 사번, 이름, 부서로 이루어져 있습니다.
-- 어떤 부서에 몇 명의 사람이 있는지 확인해보려고 합니다.

-- 지시사항
-- 사원(employees) 테이블에서 부서(dept)별 인원 수를 출력해보세요.

DESC employees;
select * from employees;

select dept, count(*)
from employees group by dept;

+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| id    | int(11)     | NO   | PRI | NULL    |       |
| name  | varchar(16) | NO   |     | NULL    |       |
| dept  | varchar(16) | NO   |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
+------+-----------+-----------+
| id   | name      | dept      |
+------+-----------+-----------+
| 1000 | 기혜주    | 영업부    |
| 1001 | 박경진    | 인사부    |
| 1002 | 도찬호    | 생산부    |
| 1003 | 정단현    | 재무부    |
| 1004 | 민정환    | 영업부    |
| 1005 | 하준형    | 인사부    |
| 1006 | 서승표    | 영업부    |
| 1007 | 임미연    | 생산부    |
| 1008 | 탁민호    | 인사부    |
| 1009 | 은연수    | 생산부    |
| 1010 | 심태준    | 영업부    |
| 1011 | 반나라    | 재무부    |
| 1012 | 천미경    | 인사부    |
| 1013 | 곽성훈    | 생산부    |
| 1014 | 강상훈    | 영업부    |
| 1015 | 지은경    | 영업부    |
| 1016 | 오정원    | 생산부    |
+------+-----------+-----------+

+-----------+----------+
| dept      | count(*) |
+-----------+----------+
| 생산부    |        5 |
| 영업부    |        6 |
| 인사부    |        4 |
| 재무부    |        2 |
+-----------+----------+

